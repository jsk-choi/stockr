using System;
using System.IO;
using System.Net;
using System.Text;
using System.Collections.Generic;

using stockr.service;


public class Application
{
    public static List<string> Queue = new List<string>(1024);

    private ISvc_test _tstSvc;

    public static void Main()
    {
        Console.Write("Hello World\n");
        Console.Write("Attempting to open stream\n");

        var url_quote_sse = "https://cloud-sse.iexapis.com/stable/stocksUSNoUTP?symbols=ACCD,ADM,AFG,AGO,AINV,ALIM,AMAL,AMRN,AOA,AQB,AROC,ASTE,ATXI,AWI,BAC-B,BBK,BDCX,BGB,BIOL,BLCT,BNDW,BPY,BSBK,BSX-A,BXS,CANG,CBT,CDEV,CETX,CHCO,CHSCO,CL,CLXT,CNF,COLB,CPRI,CRSAW,CTBB,CVCY,CYCN,DBS&token=pk_6936d6bbead54838ab45b0f845ece345";

        var response = Application.OpenSSEStream(url_quote_sse);
        Console.Write("Success! \n");
    }


    public static Stream OpenSSEStream(string url)
    {
        /*
            Optionally ignore certificate errors
            ServicePointManager.ServerCertificateValidationCallback =
             new System.Net.Security.RemoteCertificateValidationCallback(AcceptAllCertifications);
        */


        var request = WebRequest.Create(new Uri(url));
        ((HttpWebRequest)request).AllowReadStreamBuffering = false;
        var response = request.GetResponse();
        var stream = response.GetResponseStream();

        Application.ReadStreamForever(stream);

        return stream;
    }

    public static void ReadStreamForever(Stream stream)
    {
        var encoder = new UTF8Encoding();
        var buffer = new byte[2048];
        while (true)
        {
            //TODO: Better evented handling of the response stream

            if (stream.CanRead)
            {
                int len = stream.Read(buffer, 0, 2048);
                if (len > 0)
                {
                    var text = encoder.GetString(buffer, 0, len);

                    var lines = text.Trim().Split('\n');
                    for (int i = 0; i < lines.Length; i++)
                    {
                        var line = lines[i];
                        if (line.StartsWith("data:"))
                        {
                            Console.WriteLine(lines.Length);
                        }
                    }

                }
            }
            //System.Threading.Thread.Sleep(250);
        }
    }

    public static void Push(string text)
    {
        if (String.IsNullOrWhiteSpace(text))
        {
            return;
        }

        var lines = text.Trim().Split('\n');
        Application.Queue.AddRange(lines);

        if (text.Contains("data:"))
        {
            Application.ProcessLines();
        }
    }

    public static void ProcessLines()
    {
        var lines = Application.Queue;
        for (int i = 0; i < lines.Count; i++)
        {
            var line = lines[i];
            if (line.StartsWith("data:"))
            {

                Console.WriteLine(lines.Count);

            }
        }
    }

    /*
        Optionally ignore certificate errors

    */
    public bool AcceptALlCertifications(object sender,
        System.Security.Cryptography.X509Certificates.X509Certificate cert,
        System.Security.Cryptography.X509Certificates.X509Chain chain,
        System.Net.Security.SslPolicyErrors errors)
    {
        return true;
    }
}